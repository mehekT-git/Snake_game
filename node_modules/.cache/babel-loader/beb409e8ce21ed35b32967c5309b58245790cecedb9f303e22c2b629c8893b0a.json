{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\snake_game\\\\src\\\\componenets\\\\Gamestate.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport Gamepieces from \"./Gamepieces\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Gamestate = () => {\n  _s();\n  const [score, setScore] = useState(0);\n  const [highScore, setHighScore] = useState(parseInt(localStorage.getItem('highScore')) || 0);\n  const [gameOver, setGameOver] = useState(false);\n  const [collision, setCollisonType] = useState(\"\");\n\n  // Example: Logic to update score (you can customize this)\n  useEffect(() => {\n    if (score > highScore) {\n      setHighScore(score);\n      localStorage.setItem('highScore', score);\n    }\n  }, [score, highScore]);\n\n  // Function to handle game reset\n  const resetGame = () => {\n    setScore(0);\n    setGameOver(false);\n    setCollisonType(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"High Score: \", highScore]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Game Over!! \", collision === \"Wall\" ? \"You hit the wall\" : \"You ate yourself\", \"!!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please press Enter to reset the game.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }, this), !gameOver && /*#__PURE__*/_jsxDEV(Gamepieces, {\n      setScore: setScore,\n      setGameOver: setGameOver,\n      setCollisonType: setCollisonType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(Gamestate, \"W48wAq5cG7kFHwmIz+P6k9v1Ujw=\");\n_c = Gamestate;\nexport default Gamestate;\nvar _c;\n$RefreshReg$(_c, \"Gamestate\");","map":{"version":3,"names":["useState","useEffect","Gamepieces","jsxDEV","_jsxDEV","Gamestate","_s","score","setScore","highScore","setHighScore","parseInt","localStorage","getItem","gameOver","setGameOver","collision","setCollisonType","setItem","resetGame","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HP/snake_game/src/componenets/Gamestate.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport Gamepieces from \"./Gamepieces\";\r\n\r\nconst Gamestate = () => {\r\n  const [score, setScore] = useState(0);\r\n  const [highScore, setHighScore] = useState(parseInt(localStorage.getItem('highScore')) || 0);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [collision, setCollisonType] = useState(\"\");\r\n\r\n  // Example: Logic to update score (you can customize this)\r\n  useEffect(() => {\r\n    if (score > highScore) {\r\n      setHighScore(score);\r\n      localStorage.setItem('highScore', score);\r\n    }\r\n  }, [score, highScore]);\r\n\r\n  // Function to handle game reset\r\n  const resetGame = () => {\r\n    setScore(0);\r\n    setGameOver(false);\r\n    setCollisonType(\"\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>Score: {score}</p>\r\n      <p>High Score: {highScore}</p>\r\n      {\r\n        gameOver && (\r\n          <div>\r\n            <p>Game Over!! {collision === \"Wall\" ? \"You hit the wall\" : \"You ate yourself\"}!!</p>\r\n            <p>Please press Enter to reset the game.</p>\r\n          </div>\r\n        )\r\n      }\r\n      {\r\n        !gameOver && (\r\n          <Gamepieces setScore={setScore} setGameOver={setGameOver} setCollisonType={setCollisonType} />\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Gamestate;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,UAAU,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAACW,QAAQ,CAACC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC;EAC5F,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACgB,SAAS,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;;EAEjD;EACAC,SAAS,CAAC,MAAM;IACd,IAAIM,KAAK,GAAGE,SAAS,EAAE;MACrBC,YAAY,CAACH,KAAK,CAAC;MACnBK,YAAY,CAACM,OAAO,CAAC,WAAW,EAAEX,KAAK,CAAC;IAC1C;EACF,CAAC,EAAE,CAACA,KAAK,EAAEE,SAAS,CAAC,CAAC;;EAEtB;EACA,MAAMU,SAAS,GAAGA,CAAA,KAAM;IACtBX,QAAQ,CAAC,CAAC,CAAC;IACXO,WAAW,CAAC,KAAK,CAAC;IAClBE,eAAe,CAAC,EAAE,CAAC;EACrB,CAAC;EAED,oBACEb,OAAA;IAAAgB,QAAA,gBACEhB,OAAA;MAAAgB,QAAA,GAAG,SAAO,EAACb,KAAK;IAAA;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBpB,OAAA;MAAAgB,QAAA,GAAG,cAAY,EAACX,SAAS;IAAA;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAE5BV,QAAQ,iBACNV,OAAA;MAAAgB,QAAA,gBACEhB,OAAA;QAAAgB,QAAA,GAAG,cAAY,EAACJ,SAAS,KAAK,MAAM,GAAG,kBAAkB,GAAG,kBAAkB,EAAC,IAAE;MAAA;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACrFpB,OAAA;QAAAgB,QAAA,EAAG;MAAqC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC,CACN,EAGD,CAACV,QAAQ,iBACPV,OAAA,CAACF,UAAU;MAACM,QAAQ,EAAEA,QAAS;MAACO,WAAW,EAAEA,WAAY;MAACE,eAAe,EAAEA;IAAgB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAC9F;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEA,CAAC;AAEV,CAAC;AAAClB,EAAA,CAxCID,SAAS;AAAAoB,EAAA,GAATpB,SAAS;AA0Cf,eAAeA,SAAS;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}