{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\snake_game\\\\src\\\\components\\\\GamePieces.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GamePieces = ({\n  score,\n  setScore,\n  onGameOver\n}) => {\n  _s();\n  const canvasRef = useRef();\n  const SNAKE_SPEED = 10;\n  const [apple, setApple] = useState({\n    x: 180,\n    y: 100\n  });\n  const [snake, setSnake] = useState([{\n    x: 100,\n    y: 50\n  }, {\n    x: 95,\n    y: 50\n  }]);\n  const [direction, setDirection] = useState(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const drawSnake = () => {\n      snake.forEach(snakePart => {\n        ctx.beginPath();\n        ctx.rect(snakePart.x, snakePart.y, 14, 14);\n        ctx.fillStyle = \"#90EE90\";\n        ctx.fill();\n        ctx.closePath();\n      });\n    };\n    const drawApple = () => {\n      ctx.beginPath();\n      ctx.rect(apple.x, apple.y, 14, 14);\n      ctx.fillStyle = \"#FF0000\";\n      ctx.fill();\n      ctx.closePath();\n    };\n    const moveSnake = () => {\n      if (direction) {\n        setSnake(prevSnake => {\n          const newSnake = [...prevSnake];\n          const snakeHead = {\n            x: newSnake[0].x,\n            y: newSnake[0].y\n          };\n          for (let i = newSnake.length - 1; i > 0; i--) {\n            newSnake[i].x = newSnake[i - 1].x;\n            newSnake[i].y = newSnake[i - 1].y;\n          }\n          switch (direction) {\n            case \"right\":\n              snakeHead.x += SNAKE_SPEED;\n              break;\n            case \"left\":\n              snakeHead.x -= SNAKE_SPEED;\n              break;\n            case \"up\":\n              snakeHead.y -= SNAKE_SPEED;\n              break;\n            case \"down\":\n              snakeHead.y += SNAKE_SPEED;\n              break;\n            default:\n              break;\n          }\n          newSnake[0] = snakeHead;\n          handleAppleCollision(newSnake);\n          handleWallCollision(snakeHead);\n          handleBodyCollision(newSnake);\n          return newSnake;\n        });\n      }\n    };\n    const handleWallCollision = snakeHead => {\n      if (snakeHead.x + SNAKE_SPEED > canvas.width || snakeHead.x + SNAKE_SPEED < 0) {\n        onGameOver(\"wall\");\n      }\n      if (snakeHead.y + SNAKE_SPEED > canvas.height || snakeHead.y + SNAKE_SPEED < 0) {\n        onGameOver(\"wall\");\n      }\n    };\n    const handleBodyCollision = newSnake => {\n      const snakeHead = newSnake[0];\n      for (let i = 1; i < newSnake.length; i++) {\n        if (snakeHead.x === newSnake[i].x && snakeHead.y === newSnake[i].y) {\n          onGameOver(\"self\");\n        }\n      }\n    };\n    const handleAppleCollision = newSnake => {\n      const snakeHead = newSnake[0];\n      if (snakeHead.x === apple.x && snakeHead.y === apple.y) {\n        setScore(score++);\n        setApple({\n          x: Math.floor(Math.random() * canvas.width / SNAKE_SPEED) * SNAKE_SPEED,\n          y: Math.floor(Math.random() * canvas.height / SNAKE_SPEED) * SNAKE_SPEED\n        });\n        newSnake.push({\n          x: newSnake[newSnake.length - 1].x,\n          y: newSnake[newSnake.length - 1].y\n        });\n      }\n    };\n    const handleKeyPress = e => {\n      switch (e.key) {\n        case \"ArrowRight\":\n          setDirection(\"right\");\n          break;\n        case \"ArrowLeft\":\n          setDirection(\"left\");\n          break;\n        case \"ArrowUp\":\n          setDirection(\"up\");\n          break;\n        case \"ArrowDown\":\n          setDirection(\"down\");\n          break;\n        default:\n          break;\n      }\n    };\n    window.addEventListener(\"keydown\", handleKeyPress);\n    const interval = setInterval(() => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      drawSnake();\n      drawApple();\n      moveSnake();\n    }, 100);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [snake, direction]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: \"gameCanvas\",\n      ref: canvasRef,\n      width: 750,\n      height: 420\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n_s(GamePieces, \"IKtZoS/g3xLOnXGyIYHxLyQtMt0=\");\n_c = GamePieces;\nexport default GamePieces;\nvar _c;\n$RefreshReg$(_c, \"GamePieces\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","GamePieces","score","setScore","onGameOver","_s","canvasRef","SNAKE_SPEED","apple","setApple","x","y","snake","setSnake","direction","setDirection","canvas","current","ctx","getContext","drawSnake","forEach","snakePart","beginPath","rect","fillStyle","fill","closePath","drawApple","moveSnake","prevSnake","newSnake","snakeHead","i","length","handleAppleCollision","handleWallCollision","handleBodyCollision","width","height","Math","floor","random","push","handleKeyPress","e","key","window","addEventListener","interval","setInterval","clearRect","clearInterval","children","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HP/snake_game/src/components/GamePieces.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nconst GamePieces = ({ score, setScore, onGameOver }) => {\r\n  const canvasRef = useRef();\r\n  const SNAKE_SPEED = 10;\r\n  const [apple, setApple] = useState({ x: 180, y: 100 });\r\n  const [snake, setSnake] = useState([\r\n    { x: 100, y: 50 },\r\n    { x: 95, y: 50 },\r\n  ]);\r\n  const [direction, setDirection] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    const drawSnake = () => {\r\n      snake.forEach((snakePart) => {\r\n        ctx.beginPath();\r\n        ctx.rect(snakePart.x, snakePart.y, 14, 14);\r\n        ctx.fillStyle = \"#90EE90\";\r\n        ctx.fill();\r\n        ctx.closePath();\r\n      });\r\n    };\r\n\r\n    const drawApple = () => {\r\n      ctx.beginPath();\r\n      ctx.rect(apple.x, apple.y, 14, 14);\r\n      ctx.fillStyle = \"#FF0000\";\r\n      ctx.fill();\r\n      ctx.closePath();\r\n    };\r\n\r\n    const moveSnake = () => {\r\n      if (direction) {\r\n        setSnake((prevSnake) => {\r\n          const newSnake = [...prevSnake];\r\n          const snakeHead = { x: newSnake[0].x, y: newSnake[0].y };\r\n    \r\n          for (let i = newSnake.length - 1; i > 0; i--) {\r\n            newSnake[i].x = newSnake[i - 1].x;\r\n            newSnake[i].y = newSnake[i - 1].y;\r\n          }\r\n    \r\n          switch (direction) {\r\n            case \"right\":\r\n              snakeHead.x += SNAKE_SPEED;\r\n              break;\r\n            case \"left\":\r\n              snakeHead.x -= SNAKE_SPEED;\r\n              break;\r\n            case \"up\":\r\n              snakeHead.y -= SNAKE_SPEED;\r\n              break;\r\n            case \"down\":\r\n              snakeHead.y += SNAKE_SPEED;\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n    \r\n          newSnake[0] = snakeHead;\r\n    \r\n          handleAppleCollision(newSnake);\r\n          handleWallCollision(snakeHead);\r\n          handleBodyCollision(newSnake);\r\n\r\n          return newSnake;\r\n        });\r\n      }\r\n    };\r\n\r\n    const handleWallCollision = (snakeHead) => {\r\n      if (snakeHead.x + SNAKE_SPEED > canvas.width || snakeHead.x + SNAKE_SPEED < 0) {\r\n        onGameOver(\"wall\");\r\n      }\r\n      if(snakeHead.y + SNAKE_SPEED > canvas.height || snakeHead.y + SNAKE_SPEED < 0) {\r\n        onGameOver(\"wall\");\r\n      }\r\n    };\r\n\r\n    const handleBodyCollision = (newSnake) => {\r\n      const snakeHead = newSnake[0];\r\n      for (let i = 1; i < newSnake.length; i++) {\r\n        if (snakeHead.x === newSnake[i].x && snakeHead.y === newSnake[i].y) {\r\n          onGameOver(\"self\"); \r\n        }\r\n      }\r\n    };\r\n\r\n    const handleAppleCollision = (newSnake) => {\r\n      const snakeHead = newSnake[0];\r\n\r\n      if (snakeHead.x === apple.x && snakeHead.y === apple.y) {\r\n        setScore(score++);\r\n\r\n        setApple({\r\n          x:\r\n            Math.floor((Math.random() * canvas.width) / SNAKE_SPEED) *\r\n            SNAKE_SPEED,\r\n          y:\r\n            Math.floor((Math.random() * canvas.height) / SNAKE_SPEED) *\r\n            SNAKE_SPEED,\r\n        });\r\n\r\n        newSnake.push({\r\n          x: newSnake[newSnake.length - 1].x,\r\n          y: newSnake[newSnake.length - 1].y,\r\n        });\r\n      }\r\n    };\r\n\r\n    const handleKeyPress = (e) => {\r\n      switch (e.key) {\r\n        case \"ArrowRight\":\r\n          setDirection(\"right\");\r\n          break;\r\n        case \"ArrowLeft\":\r\n          setDirection(\"left\");\r\n          break;\r\n        case \"ArrowUp\":\r\n          setDirection(\"up\");\r\n          break;\r\n        case \"ArrowDown\":\r\n          setDirection(\"down\");\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"keydown\", handleKeyPress);\r\n\r\n    const interval = setInterval(() => {\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      drawSnake();\r\n      drawApple();\r\n      moveSnake();\r\n    }, 100);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [snake, direction]);\r\n\r\n  return (\r\n    <div>\r\n      <canvas className=\"gameCanvas\" ref={canvasRef} width={750} height={420} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GamePieces;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}